name: Build and deploy to stage server

on:
  push:
    branches:
      - feature/nginx-compose

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: backend
  REP_OWNER: hackathon-individual-development-plan
  DEPLOY_PATH: hackathon_11/

defaults:
  run:
    working-directory: .

jobs:
  buld_and_push_image_to_github_packages:
    name: Build and push image to GitHub Packages
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    environment:
      name: Stage

    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v4
      -
        name: Login to GutHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          labels: runnumber=${GITHUB_RUN_ID}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    name: Deploy and start the App
    runs-on: ubuntu-latest
    needs: buld_and_push_image_to_github_packages
    environment:
      name: Stage

    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v4
      -
        name: Copy docker-compose and nginx files to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }} # адрес сервера
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }} # 22
          source: "infra/docker-compose.prod.yml,infra/nginx/templates/default.conf.prod.template"
          target: ${{ env.DEPLOY_PATH }}
          overwrite: true
      -
        name: Execute remote commands to deploy and start app
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ${{ env.DEPLOY_PATH }}
            rm -f infra/.env.compose
            touch infra/.env

            echo NGINX_SERVER_NAME=${{ secrets.NGINX_SERVER_NAME }} >> infra/.env

            echo DJANGO_SECRET_KEY=$'${{ secrets.DJANGO_SECRET_KEY }}' >> infra/.env

            echo DB_NAME=${{ secrets.DB_NAME }} >> infra/.env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> infra/.env
            echo POSTGRES_PASSWORD=$'${{ secrets.POSTGRES_PASSWORD }}' >> infra/.env
            echo DB_HOST=${{ secrets.DB_HOST }} >> infra/.env
            echo DB_PORT=${{ secrets.DB_PORT }} >> infra/.env

            echo ${{ secrets.REGISTRY_PASSWORD }} | docker login ${{ env.REGISTRY }} -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin

            docker image prune -f
            docker pull  ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:latest
            docker compose --file infra/docker-compose.prod.yaml stop
            docker compose --file infra/docker-compose.prod.yaml rm backend
            docker compose --file infra/docker-compose.prod.yaml up -d
